{"ast":null,"code":"var _jsxFileName = \"/home/daniel/repos/Projects/MemoryCard/src/components/CardDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CardDisplay() {\n  _s();\n  const [images, setImg] = useState([]);\n  const [savedCards, setSavedCards] = useState([]);\n  const [level, setLevel] = useState(1);\n  const [score, setScore] = useState(0);\n  const displays = [];\n  const difficulty = 1;\n  const startingCards = 2;\n  const imageContainer = document.getElementById(\"image-container\");\n  function randomUniqueNum(range, outputCount) {\n    let arr = [];\n    for (let i = 1; i <= range; i++) {\n      arr.push(i);\n    }\n    let result = [];\n    for (let i = 1; i <= outputCount; i++) {\n      const random = Math.floor(Math.random() * (range - i));\n      result.push(arr[random]);\n      arr[random] = arr[range - i];\n    }\n    return result;\n  }\n  function checkIfCardInMemory(id) {\n    if (savedCards.includes(id)) {\n      emptyDiv(imageContainer);\n      imageContainer.textContent = \"Game Over\";\n      const tryAgainBtn = /*#__PURE__*/_jsxDEV(\"button\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 33\n      }, this);\n      return true;\n    } else {\n      setScore(score + 1);\n      return false;\n    }\n  }\n  function emptyDiv(targetDiv) {\n    if (targetDiv != null) {\n      while (targetDiv.firstChild) {\n        targetDiv.removeChild(targetDiv.firstChild);\n      }\n    }\n  }\n  function checkLevelUp() {\n    console.log(savedCards.length);\n    if (savedCards.length >= level * difficulty + startingCards) {\n      setSavedCards([]);\n      setLevel(level + 1);\n    }\n  }\n  function shuffle(id) {\n    if (!checkIfCardInMemory(id)) {\n      setSavedCards(savedCards => [...savedCards, id]);\n      var container = document.getElementById(\"image-container\");\n      var elementsArray = Array.prototype.slice.call(container.getElementsByClassName('pokemon-image'));\n      elementsArray.forEach(function (element) {\n        container.removeChild(element);\n      });\n      shuffleArray(elementsArray);\n      elementsArray.forEach(function (element) {\n        container.appendChild(element);\n      });\n    }\n  }\n  function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  /* function displayPokemonCards(numOfCards) {\n      const rando = randomUniqueNum(cards.length, numOfCards);\n       for (let i = 0; i < numOfCards; i++) {\n          displays.push(<img src={cards[rando[i]-1]}></img>);\n       }\n  } */\n  //displayPokemonCards(5);\n  useEffect(() => {\n    async function getData() {\n      const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=1000', {\n        mode: 'cors'\n      });\n      const pokeData = await response.json();\n      const urlArray = [];\n      const randArray = randomUniqueNum(pokeData.results.length, level * difficulty + startingCards);\n      emptyDiv(imageContainer);\n      for (let i = 0; i < randArray.length; i++) {\n        const newUrl = pokeData.results[randArray[i] - 1].url;\n        const response2 = await fetch(newUrl, {\n          mode: 'cors'\n        });\n        const pokeData2 = await response2.json();\n        urlArray.push(pokeData2.sprites.front_default);\n      }\n      setImg(images => [...images, ...urlArray]);\n    }\n    getData();\n  }, [level]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [checkLevelUp(), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"score-board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"level\",\n        children: [\"Level: \", level]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"image-container\",\n      children: images.map((image, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: index,\n          className: \"pokemon-image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            onClick: () => shuffle(index),\n            src: image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n_s(CardDisplay, \"KSKjdHL0h9GFSTp6YZSoFAiBMbc=\");\n_c = CardDisplay;\nexport default CardDisplay;\nvar _c;\n$RefreshReg$(_c, \"CardDisplay\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CardDisplay","_s","images","setImg","savedCards","setSavedCards","level","setLevel","score","setScore","displays","difficulty","startingCards","imageContainer","document","getElementById","randomUniqueNum","range","outputCount","arr","i","push","result","random","Math","floor","checkIfCardInMemory","id","includes","emptyDiv","textContent","tryAgainBtn","fileName","_jsxFileName","lineNumber","columnNumber","targetDiv","firstChild","removeChild","checkLevelUp","console","log","length","shuffle","container","elementsArray","Array","prototype","slice","call","getElementsByClassName","forEach","element","shuffleArray","appendChild","array","j","temp","getData","response","fetch","mode","pokeData","json","urlArray","randArray","results","newUrl","url","response2","pokeData2","sprites","front_default","children","map","image","index","className","onClick","src","_c","$RefreshReg$"],"sources":["/home/daniel/repos/Projects/MemoryCard/src/components/CardDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction CardDisplay() {\n    \n    const [images, setImg] = useState([]);\n    const [savedCards, setSavedCards] = useState([]);\n    const [level, setLevel] = useState(1);\n    const [score, setScore] = useState(0);\n    const displays = [];\n    const difficulty = 1;\n    const startingCards = 2;\n    const imageContainer = document.getElementById(\"image-container\");\n\n    function randomUniqueNum(range, outputCount) {\n        let arr = []\n        for (let i = 1; i <= range; i++) {\n          arr.push(i)\n        }\n      \n        let result = [];\n        \n        for (let i = 1; i <= outputCount; i++) {\n          const random = Math.floor(Math.random() * (range - i));\n          result.push(arr[random]);\n          arr[random] = arr[range - i];\n        }\n      \n        return result;\n    }\n    function checkIfCardInMemory(id) {\n        if(savedCards.includes(id)) {\n            emptyDiv(imageContainer);\n            imageContainer.textContent = \"Game Over\";\n\n            const tryAgainBtn = <button></button>\n            return true;\n        }\n        else {\n            setScore(score + 1)\n            return false;\n        }\n    }\n    function emptyDiv(targetDiv) {\n        if(targetDiv != null) {\n            while (targetDiv.firstChild) {\n                targetDiv.removeChild(targetDiv.firstChild);\n            }\n        }\n        \n    }\n    function checkLevelUp() {\n        console.log(savedCards.length)\n        if(savedCards.length >= level * difficulty + startingCards) {\n            setSavedCards([]);\n            setLevel(level + 1)\n        }\n    }\n    function shuffle(id) {\n        if(!checkIfCardInMemory(id)) {\n            setSavedCards(savedCards => ([...savedCards, id]));\n            var container = document.getElementById(\"image-container\");\n            var elementsArray = Array.prototype.slice.call(container.getElementsByClassName('pokemon-image'));\n            elementsArray.forEach(function(element){\n            container.removeChild(element);\n            })\n            shuffleArray(elementsArray);\n            elementsArray.forEach(function(element){\n            container.appendChild(element);\n            })\n        }\n        \n    }\n    function shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    }\n    /* function displayPokemonCards(numOfCards) {\n        const rando = randomUniqueNum(cards.length, numOfCards);\n\n        for (let i = 0; i < numOfCards; i++) {\n            displays.push(<img src={cards[rando[i]-1]}></img>);\n\n        }\n    } */\n    //displayPokemonCards(5);\n    useEffect(() => {\n        async function getData() {\n          const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=1000', {mode: 'cors'})\n          const pokeData = await response.json();\n          const urlArray = [];\n          const randArray = randomUniqueNum(pokeData.results.length, level * difficulty + startingCards)\n          \n          emptyDiv(imageContainer)\n          for (let i = 0; i < randArray.length; i ++) {\n            const newUrl = pokeData.results[randArray[i]-1].url;\n            const response2 = await fetch(newUrl, {mode: 'cors'});\n            const pokeData2 = await response2.json();\n            urlArray.push(pokeData2.sprites.front_default);\n          } \n          setImg(images => ([...images, ...urlArray]));\n        }\n        getData()\n        \n      }, [level]);\n    \n    return (\n        <div> \n        {checkLevelUp()}\n            <div id=\"score-board\">\n                <div id=\"level\">\n                    Level: {level}\n                </div>\n                <div id=\"score\">\n                    Score: {score}\n                </div>\n            </div>\n            <div id=\"image-container\">\n                {images.map((image, index) => {\n                    return <div id={index} className =\"pokemon-image\">\n                        <img onClick={() => shuffle(index)}  src={image}></img>\n                        </div>;\n                  })}\n            </div>\n\n\n        </div>\n      );\n}\nexport default CardDisplay;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}