[{"/home/daniel/repos/Projects/MemoryCard/src/index.js":"1","/home/daniel/repos/Projects/MemoryCard/src/reportWebVitals.js":"2","/home/daniel/repos/Projects/MemoryCard/src/App.js":"3","/home/daniel/repos/Projects/MemoryCard/src/components/CardDisplay.js":"4"},{"size":277,"mtime":1685239372172,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1685057107764,"results":"7","hashOfConfig":"6"},{"size":628,"mtime":1685314950812,"results":"8","hashOfConfig":"6"},{"size":4698,"mtime":1685314914308,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1pthjud",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/home/daniel/repos/Projects/MemoryCard/src/index.js",["23","24"],[],"/home/daniel/repos/Projects/MemoryCard/src/reportWebVitals.js",[],[],"/home/daniel/repos/Projects/MemoryCard/src/App.js",["25","26"],[],"/home/daniel/repos/Projects/MemoryCard/src/components/CardDisplay.js",["27","28","29","30","31","32"],[],"import { findByDisplayValue } from \"@testing-library/react\";\nimport React, { useState, useEffect } from \"react\";\nimport './CardDisplay.css';\n\nfunction CardDisplay() {\n    \n    const [images, setImg] = useState([]);\n    const [savedCards, setSavedCards] = useState([]);\n    const [level, setLevel] = useState(1);\n    const [score, setScore] = useState(0);\n    const [re, setRe] = useState(0);\n    const displays = [];\n    const difficulty = 1;\n    const startingCards = 2;\n    const imageContainer = document.getElementById(\"image-container\");\n\n    function randomUniqueNum(range, outputCount) {\n        let arr = []\n        for (let i = 1; i <= range; i++) {\n          arr.push(i)\n        }\n      \n        let result = [];\n        \n        for (let i = 1; i <= outputCount; i++) {\n          const random = Math.floor(Math.random() * (range - i));\n          result.push(arr[random]);\n          arr[random] = arr[range - i];\n        }\n      \n        return result;\n    }\n  /*   function restartGame() {\n        //setImg([])\n        \n        //setRe(1);\n        //setSavedCards([]);\n    } */\n    function checkIfCardInMemory(id) {\n        if(savedCards.includes(id)) {\n            //emptyDiv(imageContainer);\n            imageContainer.textContent = \"Game Over\";\n\n            /* const tryAgainBtn = document.createElement(\"button\");\n            tryAgainBtn.textContent = \"Try again\";\n            imageContainer.appendChild(tryAgainBtn)\n            tryAgainBtn.addEventListener(\"click\", restartGame); */\n            return true;\n        }\n        else {\n            setScore(score + 1)\n            return false;\n        }\n    }\n    function emptyDiv(targetDiv) {\n        if(targetDiv != null) {\n            while (targetDiv.firstChild) {\n                //targetDiv.removeChild(targetDiv.firstChild);\n            }\n        }\n        \n    }\n    function checkLevelUp() {\n        if(savedCards.length >= level * difficulty + startingCards) {\n            setSavedCards([]);\n            setLevel(level + 1)\n            setImg([])\n        }\n    }\n    function shuffle(id) {\n        if(!checkIfCardInMemory(id)) {\n            setSavedCards(savedCards => ([...savedCards, id]));\n            var container = document.getElementById(\"image-container\");\n            var elementsArray = Array.prototype.slice.call(container.getElementsByClassName('pokemon-image'));\n            elementsArray.forEach(function(element){\n            container.removeChild(element);\n            })\n            shuffleArray(elementsArray);\n            elementsArray.forEach(function(element){\n            container.appendChild(element);\n            })\n        }\n        \n    }\n    function shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    }\n    /* function displayPokemonCards(numOfCards) {\n        const rando = randomUniqueNum(cards.length, numOfCards);\n\n        for (let i = 0; i < numOfCards; i++) {\n            displays.push(<img src={cards[rando[i]-1]}></img>);\n\n        }\n    } */\n    //displayPokemonCards(5);\n    useEffect(() => {\n        async function getData() {\n          const response = await fetch('https://pokeapi.co/api/v2/pokemon?limit=1000', {mode: 'cors'})\n          const pokeData = await response.json();\n          const urlArray = [];\n          const randArray = randomUniqueNum(pokeData.results.length, level * difficulty + startingCards)\n          emptyDiv(imageContainer)\n          for (let i = 0; i < randArray.length; i ++) {\n            const newUrl = pokeData.results[randArray[i]-1].url;\n            const response2 = await fetch(newUrl, {mode: 'cors'});\n            const pokeData2 = await response2.json();\n            urlArray.push(pokeData2.sprites.front_default);\n          } \n          setImg(images => ([...images, ...urlArray]));\n        }\n        getData()\n        \n      }, [level]);\n    \n    return (\n        <div> \n        {checkLevelUp()}\n            <div id=\"score-board\">\n                <div id=\"level\">\n                    Level: {level}\n                </div>\n                <div id=\"score\">\n                    Score: {score}\n                </div>\n            </div>\n            <div id=\"image-container\">\n                {images.map((image, index) => {\n                    return <div id={index} className =\"pokemon-image\">\n                        <img style={{animation:'fadeIn 0.5s'}} onClick={() => shuffle(index)}  src={image}></img>\n                        </div>;\n                  })}\n            </div>\n\n\n        </div>\n      );\n}\nexport default CardDisplay;",{"ruleId":"33","severity":1,"message":"34","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":27},{"ruleId":"33","severity":1,"message":"37","line":5,"column":8,"nodeType":"35","messageId":"36","endLine":5,"endColumn":23},{"ruleId":"33","severity":1,"message":"38","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":25},{"ruleId":"33","severity":1,"message":"39","line":2,"column":10,"nodeType":"35","messageId":"36","endLine":2,"endColumn":16},{"ruleId":"33","severity":1,"message":"40","line":1,"column":10,"nodeType":"35","messageId":"36","endLine":1,"endColumn":28},{"ruleId":"33","severity":1,"message":"41","line":11,"column":12,"nodeType":"35","messageId":"36","endLine":11,"endColumn":14},{"ruleId":"33","severity":1,"message":"42","line":11,"column":16,"nodeType":"35","messageId":"36","endLine":11,"endColumn":21},{"ruleId":"33","severity":1,"message":"43","line":12,"column":11,"nodeType":"35","messageId":"36","endLine":12,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":120,"column":10,"nodeType":"46","endLine":120,"endColumn":17,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":136,"column":25,"nodeType":"50","endLine":136,"endColumn":108},"no-unused-vars","'StrictMode' is defined but never used.","Identifier","unusedVar","'reportWebVitals' is defined but never used.","'useState' is defined but never used.","'render' is defined but never used.","'findByDisplayValue' is defined but never used.","'re' is assigned a value but never used.","'setRe' is assigned a value but never used.","'displays' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'imageContainer'. Either include it or remove the dependency array.","ArrayExpression",["51"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"52","fix":"53"},"Update the dependencies array to be: [imageContainer, level]",{"range":"54","text":"55"},[3994,4001],"[imageContainer, level]"]